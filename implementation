//Successor with delete. Given a set of n integers S={0,1,...,n−1} and a sequence of requests of the following form:

//Remove x from S
//Find the successor of x: the smallest y in S such that y≥x.
//design a data type so that all operations (except construction) take logarithmic time or better in the worst case.
class WeightedQuickUnionUF{
      private int []m_iParent;
      private int []m_iSize; 
      private boolean []m_bRemoved;
      int num;
      
    
      public WeightedQuickUnionUF(int N){
           m_iParent=new int [N];
           m_iSize=new int [N];
           m_bRemoved=new boolean [N];//用于记录是否被移除
           num=N;
           
           for(int i=0;i<N;i++){
              m_iParent[i]=i;
              m_iSize[i]=1;
              m_bRemoved[i]=false;
           }
           
      }
      
      
    private int root(int p){
        while(m_iParent[p]!=p)
            p=m_iParent[p];
        return p;   
    }
    
    
    public void remove(int x){
        m_bRemoved[x]=true;
        if(x>0&&m_bRemoved[x-1])            //关键就在于，相邻才union
            union(x,x-1);    
        if(x<num-1&&m_bRemoved[x+1])
            union(x,x+1);
    }
    
    
    public int getSuccessor(int x){
          if(!m_bRemoved[x]){
              return x;
          }else{
              int res=root(x)+1;
              if(res>=num)
                  return -1;
              else return res;
          }   
    }
    
    
    public void union(int p,int q){
        int rootP=root(p);
        int rootQ=root(q);
        
        int max=m_iMax[rootP]>m_iMax[rooQ]?m_iMax[rootP]:m_iMax[rooQ];
        if(m_iSize[rootQ]>m_iSize[rootP]){
            m_iParent[rootP]=rootQ;
            m_iSize[rootQ]+=m_iSize[rootP];
            m_iMax[rootQ]=max;
            
            if(m_iSize[rootQ]>m_iMostUnionedSites)
                m_iMostUnionedSites=m_iSize[rootQ];
        }
        else{
            m_iParent[rootQ]=rootP;
            m_iSize[rootP]+=m_iSize[rootQ];
            m_iMax[rootP]=max;
            
            if(m_iSize[rootP]>m_iMostUnionedSites)
                m_iMostUnionedSites=m_iSize[rootP];
        }
     }
     
     
     public int find(int i){
     //在到所有与i相连的结点中，找到最大的那个
          int rootI=root(i);
          return m_iMax[rootI];
     }
     
  
} 
